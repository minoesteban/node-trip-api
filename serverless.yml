service: trip-api

plugins:
  - serverless-offline
  # - serverless-pseudo-parameters
  # - serverless-plugin-split-stacks
  # - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs12.x
  # memorySize: 256
  # timeout: 30 # no se puede poner más que esto, API Gateway tiene como restricción 30seg de timeout
  role: ${self:custom.env.IAM_ROLE} #arn:aws:iam::454213127160:role/trip-api-lambda

  # vpc:
  #   securityGroupIds:
  #     { 'Fn::Split': [',', '${self:custom.env.DB_SECURITY_GROUP}'] }
  #   subnetIds: { 'Fn::Split': [',', '${self:custom.env.DB_SUBNETS}'] }

  environment:
    APP_VERSION: ${self:custom.version}
    HOST: ${self:custom.env.HOST}
    PORT: ${self:custom.env.PORT}
    DB: ${self:custom.env.DB}
    USER: ${self:custom.env.USER}
    PASSWORD: ${self:custom.env.PASSWORD}
    AUDIO_FOLDER: ${self:custom.env.AUDIO_FOLDER}
    IMAGE_FOLDER: ${self:custom.env.IMAGE_FOLDER}
    # LOGLEVEL: ${self:custom.env.LOGLEVEL}
    # TOKEN_TIME_SET: ${self:custom.env.TOKEN_TIME_SET}
    # SECRET_PASSWORD_TOKEN: ${self:custom.env.SECRET_PASSWORD_TOKEN}

package:
  include:
    - node_modules/**
    - server/**
  # exclude:
  #   - serverless_ymls/**
  #   - apidoc/**
  #   - test/**

custom:
  stage: ${opt:stage, 'dev'}
  version: '1.0'

  # prune:
  #   automatic: true
  #   number: 3

  env:
    APP_VERSION: ${self:custom.version}
    HOST: ${self:custom.env.${self:custom.stage}.HOST, self:custom.env.default.HOST}
    PORT: ${self:custom.env.${self:custom.stage}.PORT, self:custom.env.default.PORT}
    DB: ${self:custom.env.${self:custom.stage}.DB, self:custom.env.default.DB}
    USER: ${self:custom.env.${self:custom.stage}.USER, self:custom.env.default.USER}
    PASSWORD: ${self:custom.env.${self:custom.stage}.PASSWORD, self:custom.env.default.PASSWORD}
    S3_BUCKET: ${self:custom.env.${self:custom.stage}.S3_BUCKET, self:custom.env.default.S3_BUCKET}
    STORAGE_DOMAIN: ${self:custom.env.${self:custom.stage}.STORAGE_DOMAIN, self:custom.env.default.STORAGE_DOMAIN}
    IAM_ROLE: ${self:custom.env.${self:custom.stage}.IAM_ROLE, self:custom.env.default.IAM_ROLE}
    AUDIO_FOLDER: ${self:custom.env.${self:custom.stage}.AUDIO_FOLDER, self:custom.env.default.AUDIO_FOLDER}
    IMAGE_FOLDER: ${self:custom.env.${self:custom.stage}.IMAGE_FOLDER, self:custom.env.default.IMAGE_FOLDER}
    # LOGLEVEL: ${self:custom.env.${self:custom.stage}.LOGLEVEL, self:custom.env.default.LOGLEVEL}
    # DB_SECURITY_GROUP: ${self:custom.env.${self:custom.stage}.DB_SECURITY_GROUP, self:custom.env.default.DB_SECURITY_GROUP}
    # DB_SUBNETS: ${self:custom.env.${self:custom.stage}.DB_SUBNETS, self:custom.env.default.DB_SUBNETS}
    # VPC_ID: ${self:custom.env.${self:custom.stage}.VPC_ID, self:custom.env.default.VPC_ID}
    # TOKEN_TIME_SET: ${self:custom.env.${self:custom.stage}.TOKEN_TIME_SET, self:custom.env.default.TOKEN_TIME_SET}
    # SECRET_PASSWORD_TOKEN: ${self:custom.env.${self:custom.stage}.SECRET_PASSWORD_TOKEN, self:custom.env.default.SECRET_PASSWORD_TOKEN}

    default:
      APP_VERSION: ${self:custom.version}
      HOST: ${ssm:/api/${self:custom.stage}/db/host}
      PORT: ${ssm:/api/${self:custom.stage}/db/port}
      DB: ${ssm:/api/${self:custom.stage}/db/name}
      USER: ${ssm:/api/${self:custom.stage}/db/username}
      PASSWORD: ${ssm:/api/${self:custom.stage}/db/password~true}
      STORAGE_DOMAIN: ${ssm:/api/${self:custom.stage}/storage/domain}
      S3_BUCKET: ${ssm:/api/${self:custom.stage}/storage/name}
      AUDIO_FOLDER: 'audios'
      IMAGE_FOLDER: 'images'
      IAM_ROLE: ${ssm:/api/${self:custom.stage}/security/iam-role}
      # LOGLEVEL: 'WARN'
      # DB_SECURITY_GROUP: ${ssm:/api/${self:custom.stage}/security/vpc/sg/lambda}
      # DB_SUBNETS: ${ssm:/api/${self:custom.stage}/security/vpc/subnets/private}
      # VPC_ID: ${ssm:/api/${self:custom.stage}/security/vpc/id}
      # TOKEN_TIME_SET: ${ssm:/api/${self:custom.stage}/security/token_time_set}
      # SECRET_PASSWORD_TOKEN: ${ssm:/api/${self:custom.stage}/security/secret_password_token}

functions:
  user:
    handler: server/handlers/user.handler
    description: 'Lambda Users handler'
    events:
      - http:
          path: /api/${self:custom.version}/users
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/users
          method: POST
          cors: true
      - http:
          path: /api/${self:custom.version}/users/all
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/users/{userId}
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/users/{userId}
          method: PATCH
          cors: true
  trip:
    handler: server/handlers/trip.handler
    description: 'Lambda Trips handler'
    environment:
      S3_BUCKET: ${self:custom.env.S3_BUCKET}
      STORAGE_DOMAIN: ${self:custom.env.STORAGE_DOMAIN}
    events:
      - http:
          path: /api/${self:custom.version}/trips
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/trips
          method: POST
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/all
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}
          method: PATCH
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/audios
          method: PUT
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}
          method: DELETE
          cors: true
  place:
    handler: server/handlers/place.handler
    description: 'Lambda Places handler'
    events:
      - http:
          path: /api/${self:custom.version}/trips/places/all
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places
          method: POST
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: PATCH
          cors: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: DELETE
          cors: true
  purchase:
    handler: server/handlers/purchase.handler
    description: 'Lambda Purchases handler'
    events:
      - http:
          path: /api/${self:custom.version}/purchases/all
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/purchases
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/purchases
          method: POST
          cors: true
      - http:
          path: /api/${self:custom.version}/purchases/{purchaseId}
          method: PATCH
          cors: true
  rating:
    handler: server/handlers/rating.handler
    description: 'Lambda Ratings handler'
    events:
      - http:
          path: /api/${self:custom.version}/ratings/all
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/ratings
          method: GET
          cors: true
      - http:
          path: /api/${self:custom.version}/ratings
          method: POST
          cors: true
      - http:
          path: /api/${self:custom.version}/ratings/{ratingId}
          method: PATCH
          cors: true
